name: DOCKER-CD

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: 체크아웃
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Gradle Caching (빌드 시간 향상)
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 빌드 (Gradle)
        run: |
          chmod +x gradlew
          ./gradlew build -x test

      - name: Docker Hub 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_LOGIN_USERNAME }}
          password: ${{ secrets.DOCKER_LOGIN_ACCESSTOKEN }}

      - name: Docker 이미지 빌드 및 푸시
        run: |
          GIT_TAG=$(git rev-parse --short HEAD)
          docker build --platform linux/amd64 -t jsoonworld/terning-farewell-server:$GIT_TAG .
          docker push jsoonworld/terning-farewell-server:$GIT_TAG
          docker tag jsoonworld/terning-farewell-server:$GIT_TAG jsoonworld/terning-farewell-server:latest
          docker push jsoonworld/terning-farewell-server:latest

  deploy:
    name: Deploy to EC2
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: 프론트엔드 소스 코드 체크아웃
        uses: actions/checkout@v4
        with:
          repository: terning-farewell-thanks/terning-farewell-client
          path: client
          token: ${{ secrets.GH_PAT }} 

      - name: Node.js 20.x 버전 설정
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: 프론트엔드 의존성 설치 및 빌드
        run: |
          cd client
          npm install
          npm run build

      - name: EC2 서버에 프론트엔드 dist 폴더 업로드
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_KEY }}
          source: "client/dist"
          target: "/home/ubuntu"
          rm: true

      - name: Docker 컨테이너 실행
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_KEY }}
          script: |
            cd ~
            ./deploy.sh
